<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Three-letter's Blog]]></title>
  <link href="http://three-letter.github.com/atom.xml" rel="self"/>
  <link href="http://three-letter.github.com/"/>
  <updated>2013-01-07T11:58:59+08:00</updated>
  <id>http://three-letter.github.com/</id>
  <author>
    <name><![CDATA[Three-letter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PPST之视播功能调研]]></title>
    <link href="http://three-letter.github.com/blog/2013/01/06/ppstzhi-shi-bo-gong-neng-diao-yan/"/>
    <updated>2013-01-06T16:35:00+08:00</updated>
    <id>http://three-letter.github.com/blog/2013/01/06/ppstzhi-shi-bo-gong-neng-diao-yan</id>
    <content type="html"><![CDATA[<h3>视播功能的基本需求</h3>

<p>在PPST中视播功能应该包含以下两个：</p>

<p>1）视频播放，包括：外观、播放、暂停、停止、声音调节、全屏等</p>

<p>2）限时试看，能够在一定条件下限制视频资源的试看时间</p>

<h3>媒体播放器jPlayer</h3>

<p><a href="http://www.jplayer.org">jPlayer</a>是一款非常优秀的基于jQuery的HTML5开源播放器，支持音频和视频，同时提供了2套非常fashion的皮肤。</p>

<p>通过官网的<a href="http://www.jplayer.org/latest/developer-guide">dev guide</a>能快速上手，其强大的功能完全能够满足视播的需求</p>

<p>1）构建一个jPlayer播放器</p>

<p>其中有几个需要注意的设置：播放器支持的格式， 视频资源、jPlayer提供的swf、视频海报(封面)的路径，具体可参考如下：</p>

<pre><code>$("#jquery_jplayer_1").jPlayer({
    ready: function () {
        $(this).jPlayer("setMedia", {
            ogv: "assets/Big_Buck_Bunny_Trailer.ogv",
            poster: "http://www.jplayer.org/video/poster/Big_Buck_Bunny_Trailer_480x270.png"
        });
    },
    swfPath: "assets",
    supplied: "ogv",
    size: {
        width: "640px",
        height: "360px",
        cssClass: "jp-video-360p"
    }
});
</code></pre>

<p>2）限时试看</p>

<p>jPlayer提供了事件 绑定及相关功能，查询<a href="http://www.jplayer.org/latest/developer-guide">dev guide</a>后可以很清楚的发现timeupdate事件能满足限时试看需求，描述如下：</p>

<pre><code>$.jPlayer.event.timeupdate * Occurs when the currentTime is changed. (~250ms between events during playback.)
</code></pre>

<p>实现原理及方法：jPlayer播放视频时，绑定其timeupdate事件，在指定条件下(如：限时试看5s)触发对应的功能(如：暂停播放、将视频播放时间回调至5s、显示提示信息)，具体代码如下：</p>

<pre><code>$("#jquery_jplayer_1").bind($.jPlayer.event.timeupdate, function(event){
    var cur = event.jPlayer.status.currentTime;
    if (cur &gt; 5){
        $(this).jPlayer("pause", 5);
        $("#play-a").click();
    }
});
</code></pre>

<p>3）demo展示</p>

<p>通过以上方法就能轻松实现视播的基本功能，通过<a href="http://ppst-demo.herokuapp.com/home/index">点击这里</a>查看demo。</p>

<p>ps:demo部署在heroku(国外的云平台)上，可能会有点卡或慢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PPST之简要需求文档]]></title>
    <link href="http://three-letter.github.com/blog/2013/01/05/ppstzhi-jian-yao-xu-qiu-wen-dang/"/>
    <updated>2013-01-05T17:41:00+08:00</updated>
    <id>http://three-letter.github.com/blog/2013/01/05/ppstzhi-jian-yao-xu-qiu-wen-dang</id>
    <content type="html"><![CDATA[<table style="border:1px solid black;">
<tr>
<td width="120px">PPST需求文档</td>
</tr>
<tr>
<td width="100px">修订历史</td>
</tr>
<tr>
<td width="60px">版本</td> <td width="60px">说明</td> <td width="80px">编制人</td><td width="60px">日期</td>
</tr>
<tr>
<td>v1.0</td><td>初次</td><td>halsey</td><td>2013-01-04</td>
</tr>
</table>


<p></p>

<h3>1. 引言</h3>

<h4>1.1 系统概述</h4>

<p>PPST(the platform for programming to share and transactions)是针对编程爱好者基于视频方式分享交易编程经验和心得的开放平台。</p>

<h4>1.2 运行环境</h4>

<p>基于Ruby on Rails + Postgresql + Thin实现，仿真环境部署在Heroku。</p>

<h4>1.3 目标用户</h4>

<p>编程爱好者</p>

<h3>2. 功能需求</h3>

<h4>2.1 系统背景</h4>

<p>目前国内编程环境相对落后，很多编程菜鸟因为各种原因(比如：英文 墙等)无法获得较新的文档资料，在编程的学习路上艰难前进，同时大部分编程老鸟出于一些原因(如：时间 文字)在分享时过于简略，不够系统。</p>

<p>PPST以视频的方式向编程菜鸟详细展示了具体编程时的经验和技巧，同时提供的交易系统能为分享者提供对应的报酬。通过该平台编程爱好者能很好的解决各自的需求且形式简单明了，营造国内健康良好的编程氛围</p>

<h4>2.2 系统总体流程</h4>

<p>暂略</p>

<h4>2.3 需求分析</h4>

<h5>2.3.1 用户中心(User)</h5>

<p>注册: 未注册用户通过用户名和密码注册网站，为了方便不需要邮箱</p>

<p>登录: 注册用户通过用户名和密码登录</p>

<p>验证: 对于发布有偿分享交易的注册用户需要通过验证码和邮箱进行Verification并绑定支付宝账号</p>

<p>头像: 用户上传头像，支持裁剪，默认使用小图40*40</p>

<h5>2.3.2 视播中心(Broadcast)</h5>

<p>无偿分享视播: 注册用户直接上传视播资源</p>

<p>有偿分享视播: 验证用户上传视播资源，并选择对应的有偿参数</p>

<p>悬赏视播: 注册用户根据自己的需求悬赏相应的视播资源</p>

<p>试看: 视播资源在分享时支持自定义免费试看时间，默认1/4</p>

<p>Ps：对于悬赏是否需要平台做第三方(使用类似钱包的功能实现)</p>

<h5>2.3.3 评论中心(Comment)</h5>

<p>评论视播: 注册用户评论指定的视播资源，若已付费观看过的则显示特殊标记用于其他用户初步了解视播资源的有效性</p>

<h5>2.3.4 消息中心(Message)</h5>

<p>播放有偿视播: 注册用户付费观看有偿视播资源后，系统向该视播资源的发布者和观看者同时发送用户付费观看消息</p>

<p>评论视播: 注册用户评论视播后，系统向该视播发布者发送消息(暂不考虑过多导致垃圾消息)</p>

<p>Ps：对于有一定社交氛围后可考虑@功能</p>

<h3>3. 非功能需求</h3>

<h4>3.1 数据有效性规则</h4>

<p>用户名: 3 - 8位非特殊字符</p>

<p>验证邮箱: email规则</p>

<p>视播分享: title为1-32位非特殊字符 desc，tag可选</p>

<p>评论: 1-128字符</p>

<h4>3.2 数据存储</h4>

<p>视播资源以文件的形式保存在upload目录下，其他数据保存在一个数据库postgresql</p>

<h4>3.3 扩展性要求</h4>

<p>前期不开放非管理员用户上传视播资源</p>

<h4>3.4 如何录制视频</h4>

<p>为所有网站用户分享在不同OS下录制视频的方法</p>

<p>未完待续…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux基本使用]]></title>
    <link href="http://three-letter.github.com/blog/2012/12/19/tmuxji-ben-shi-yong/"/>
    <updated>2012-12-19T23:41:00+08:00</updated>
    <id>http://three-letter.github.com/blog/2012/12/19/tmuxji-ben-shi-yong</id>
    <content type="html"><![CDATA[<p>由于在工作中需要经常性使用终端且有多个操作同时进行，在正常的终端下需要开多个Tab或者窗口，不停的在之间来回切换，非常的麻烦。</p>

<p><a href="http://tmux.sourceforge.net">Tmux</a>的多session和窗口可分屏机制正好完美的解决了这种问题，现在就来体验tmux。</p>

<h3>安装tmux</h3>

<p>  sudo apt-get install tmux</p>

<h3>基本用法</h3>

<p>安装完成后，在终端中直接输入 <code>tmux</code> 即可启动。
启动后窗口的最下栏左侧有该tmux当前session(默认是数字0-9)和应用(默认是~）的名字，如：[blog] 0:vim*</p>

<h4>1.创建命名session</h4>

<p>创建指定名称的session</p>

<pre><code>tmux new-session -s blog
</code></pre>

<p>成功之后便可以该新tmux窗口中进行各种操作，同时可以通过快捷键C-b d退出该窗口(只是隐藏并未关闭该session)</p>

<h4>2.查询全部的session</h4>

<p>可查询已创建的全部tmux session</p>

<p>  tmux list-sessions</p>

<h4>3.打开</h4>

<p>可根据需要打开对应的session窗口</p>

<p>  tmux a -t blog</p>

<h4>4.关闭session</h4>

<p>支持关闭指定session或全部关闭</p>

<p>  tmux kill-session blog
  tmux kill-server</p>

<h3>5.窗口分屏</h3>

<p>打开具体session窗口后，可通过快捷键对窗口进行相应的分屏操作</p>

<pre><code>C-b ": 上下分屏 
C-b %:  左右分屏
</code></pre>

<p>同时分屏后有两种方式对各屏幕进行切换跳转</p>

<pre><code>C-b o: 当前屏幕往下切换
C-b hjkl: 当前屏幕上下左右切换
</code></pre>

<p>最后附一张分屏后名为blog的tmux窗口</p>

<p><img src="http://three-letter.github.com/images/tmux.png" alt="tmux split" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github社会化编程之fork和pull request]]></title>
    <link href="http://three-letter.github.com/blog/2012/12/18/githubshe-hui-hua-bian-cheng-zhi-forkhe-pull-request/"/>
    <updated>2012-12-18T14:24:00+08:00</updated>
    <id>http://three-letter.github.com/blog/2012/12/18/githubshe-hui-hua-bian-cheng-zhi-forkhe-pull-request</id>
    <content type="html"><![CDATA[<p>在社会化编程上，<a href="https://github.com/">github</a>让程序员间协同工作变得更加简单有趣。
通过对<a href="https://help.github.com/articles/fork-a-repo">fork</a>和<a href="https://help.github.com/articles/using-pull-requests">pull request</a>的基本应用对github社会化编程有个清晰的认识。</p>

<h3>Fork</h3>

<h4>1.创建项目分支</h4>

<p>在目标repo详细页的右上角有个Fork按钮，点击后提示&#8221;fork the repo&#8221;,等待几秒后跳转至该repo详细页。</p>

<h4>2.克隆之前创建的项目分支至本地</h4>

<pre><code>git clone git@github.com:yourname/yourforkproject.git
</code></pre>

<h4>3.配置远程连接</h4>

<pre><code>git remote add upstream https://github.com/owen/project.git
# 添加一个名为upstream的目标项目远程连接
git fetch upstream
# 获取目标项目的更新代码至本地
</code></pre>

<h3>Pull Request</h3>

<h4>1.提交修改至项目所有者</h4>

<p>通过github项目分支的详细页右上角Pull Request按钮，确认该request的标题和描述后即可提交。当然也可查看具体修改的文件信息内容。</p>

<h4>2.项目所有者查看修改</h4>

<p>有以下两种方式：</p>

<p>所有的修改请求都会发送邮件至所有者的github注册邮箱，里面有修改信息和对应的链接，点开即可查看。</p>

<p>在原始项目的详细页上面的工具栏中Pull Requests(123)出显示了全部的待合并的修改。
项目所有者点击进去查看，可根据修改的有效性进行合并或直接关闭</p>

<h4>3.合并有用的修改</h4>

<p>若修改没有冲突，github会提示&#8221;This request can be automatically merge&#8221;,那么直接点击后面的Merge Pull Request按钮即可合并</p>

<p>若存在冲突，github会提示&#8221;Thoes request can&#8217;t be automatically merge&#8221;，后面也不存在Merge Pull Request按钮，需要手工合并
通过以下方式合并：</p>

<pre><code>cd project
git remote add forker git://github.com/forker/project.git
# 这里的远程连接指定的是git read-only地址
git fetch forker
# 获取指定forker所有的已提交修改
git merge forker/master
# 会提示automatically merge fail
git status
# 打开对应的文件手工合并即可
git push 
# 合并完成后提交github
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu上安装和配置postgresql]]></title>
    <link href="http://three-letter.github.com/blog/2012/12/17/ubuntushang-an-zhuang-he-pei-zhi-postgresql/"/>
    <updated>2012-12-17T14:50:00+08:00</updated>
    <id>http://three-letter.github.com/blog/2012/12/17/ubuntushang-an-zhuang-he-pei-zhi-postgresql</id>
    <content type="html"><![CDATA[<h3>1.安装postgresql</h3>

<p>ubuntu上有现成的postgresql，故使用apt-get直接安装</p>

<pre><code>sudo apt-get install postgresql-9.1
</code></pre>

<h3>2.创建用户组和用户</h3>

<p>postgresql需要一个专门的用户才能使用</p>

<pre><code>sudo groupadd postgresql
sudo useradd -g postgres postgresql
</code></pre>

<p>需要给用户postgres更改密码</p>

<pre><code>sudo passwd postgres
</code></pre>

<h3>3.创建数据库文件存储目录并给postgres赋权</h3>

<pre><code>sudo mkdir /usr/local/pgsql/data
cd /usr/local/pgsql
sudo chown -R postgres:postgresql data
</code></pre>

<h3>4.初始化数据库目录</h3>

<p>ubuntu默认安装pg目录为: /usr/lib/postgresql/9.1</p>

<pre><code>su postgres
/usr/lib/postgresql/9.1/bin/initdb -D /usr/local/pgsql/data
</code></pre>

<h3>5.启动数据库</h3>

<pre><code>su postgres
/usr/lib/postgresql/9.1/bin/postmaster -D /usr/local/pgsql/data
</code></pre>

<h3>6.给postgresql命令做软连接，方便之后的操作</h3>

<pre><code>sudo ln -s /usr/lib/postgresql/9.1/bin/* /usr/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过net/http实现自动登录和发贴]]></title>
    <link href="http://three-letter.github.com/blog/2012/10/22/tong-guo-net-slash-httpshi-xian-wang-zhan-zi-dong-deng-lu-he-fa-tie/"/>
    <updated>2012-10-22T16:42:00+08:00</updated>
    <id>http://three-letter.github.com/blog/2012/10/22/tong-guo-net-slash-httpshi-xian-wang-zhan-zi-dong-deng-lu-he-fa-tie</id>
    <content type="html"><![CDATA[<h3>1. 网站的自动登录</h3>

<p>(1)引入net/http库</p>

<pre><code>require 'net/http'
</code></pre>

<p>(2)获取登录网站后的cookie</p>

<pre><code>rsp    = con.post(url.path,data,{})
cookie = rsp.response['set-cookie']
</code></pre>

<p>(3)一般将上述操作封装成一个login方法，返回http连接和cookie用于之后的权限操作</p>

<pre><code>def login
    url = URI.parse(url) unless url.is_a?(URI)
    con = Net::HTTP.new(url.host,url.port)
    data = "username=abc&amp;password=123"
    rsp = con.post(url.path,data,{})
    cookie = rsp.response['set-cookie']
    head = {
        'Content-Type' =&gt; "application/x-www-form-urlencoded; charset=UTF-8",
        'Cookie'       =&gt; cookie
    }
    connection, headers = con, head
end
</code></pre>

<h3>2. 自动发贴</h3>

<p>通过上述的自动登录获取对应的con连接和headers，实现网站的权限操作(比如发贴, 查看个人信息等)</p>

<pre><code>def post
    con, headers = login
    data = "post_title=abc&amp;post_content=xyz&amp;user_id=123"
    rsp = con.post("post submit action",data,headers)
    msg = rsp.body
end
</code></pre>
]]></content>
  </entry>
  
</feed>
